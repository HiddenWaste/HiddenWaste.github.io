{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Carter\\\\OneDrive - Dakota State University\\\\Documents\\\\obsidian-sync\\\\Office-Bar-Book\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DrinkSlide from './components/DrinkSlide';\nimport drinksData from './data/drinks.json';\nimport './styles.css';\n\n// Main App Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Setup the usestates for the slideshow and drinks\n  const [drinks, setDrinks] = useState([]);\n  const [isSlideshowActive, setIsSlideshowActive] = useState(false);\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  // Load drinks data on component mount\n  useEffect(() => {\n    setDrinks(drinksData); // imported json data\n  }, []);\n  const startSlideshow = () => {\n    setIsSlideshowActive(true);\n    setCurrentSlide(0); // Start with the first drink\n\n    // Fullscreen API: Request full-screen mode\n    if (document.documentElement.requestFullscreen) {\n      document.documentElement.requestFullscreen().catch(err => {\n        console.error(`Error attempting to enable full-screen mode: ${err.message}`);\n      });\n    }\n  };\n  const nextSlide = () => {\n    setCurrentSlide(prevSlide => (prevSlide + 1) % drinks.length);\n  };\n  const exitSlideshow = () => {\n    setIsSlideshowActive(false);\n\n    // Fullscreen API: Exit full-screen mode\n    if (document.exitFullscreen) {\n      document.exitFullscreen().catch(err => {\n        console.error(`Error attempting to exit full-screen mode: ${err.message}`);\n      });\n    }\n  };\n  useEffect(() => {\n    if (isSlideshowActive) {\n      const interval = setInterval(nextSlide, 9000); // Change slide every 3 seconds\n      return () => clearInterval(interval);\n    }\n  }, [isSlideshowActive, drinks.length]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Drink Slideshow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSlideshow,\n        className: \"start-slideshow-button\",\n        children: \"Start Full-Screen Slideshow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slideshow\",\n      children: isSlideshowActive ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"full-screen-slideshow\",\n        children: [/*#__PURE__*/_jsxDEV(DrinkSlide, {\n          drink: drinks[currentSlide]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exitSlideshow,\n          className: \"exit-slideshow-button\",\n          children: \"~\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this) : drinks.map((drink, index) => /*#__PURE__*/_jsxDEV(DrinkSlide, {\n        drink: drink\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"iI8kJlWcnLyBr4QW3TekeN4JYM8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DrinkSlide","drinksData","jsxDEV","_jsxDEV","App","_s","drinks","setDrinks","isSlideshowActive","setIsSlideshowActive","currentSlide","setCurrentSlide","startSlideshow","document","documentElement","requestFullscreen","catch","err","console","error","message","nextSlide","prevSlide","length","exitSlideshow","exitFullscreen","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","drink","map","index","_c","$RefreshReg$"],"sources":["C:/Users/Carter/OneDrive - Dakota State University/Documents/obsidian-sync/Office-Bar-Book/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DrinkSlide from './components/DrinkSlide';\r\nimport drinksData from './data/drinks.json';\r\nimport './styles.css';\r\n\r\n// Main App Component\r\nconst App = () => {\r\n    // Setup the usestates for the slideshow and drinks\r\n    const [drinks, setDrinks] = useState([]);\r\n    const [isSlideshowActive, setIsSlideshowActive] = useState(false);\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n    // Load drinks data on component mount\r\n    useEffect(() => {\r\n        setDrinks(drinksData); // imported json data\r\n    }, []);\r\n\r\n    const startSlideshow = () => {\r\n        setIsSlideshowActive(true);\r\n        setCurrentSlide(0); // Start with the first drink\r\n        \r\n        // Fullscreen API: Request full-screen mode\r\n        if (document.documentElement.requestFullscreen) {\r\n            document.documentElement.requestFullscreen().catch(err => {\r\n                console.error(`Error attempting to enable full-screen mode: ${err.message}`);\r\n            });\r\n        }\r\n    };\r\n\r\n    const nextSlide = () => {\r\n        setCurrentSlide((prevSlide) => (prevSlide + 1) % drinks.length);\r\n    };\r\n\r\n    const exitSlideshow = () => {\r\n        setIsSlideshowActive(false);\r\n        \r\n        // Fullscreen API: Exit full-screen mode\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen().catch(err => {\r\n                console.error(`Error attempting to exit full-screen mode: ${err.message}`);\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isSlideshowActive) {\r\n            const interval = setInterval(nextSlide, 9000); // Change slide every 3 seconds\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [isSlideshowActive, drinks.length]);\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <header>\r\n                <h1>Drink Slideshow</h1>\r\n                <button onClick={startSlideshow} className=\"start-slideshow-button\">\r\n                    Start Full-Screen Slideshow\r\n                </button>\r\n            </header>\r\n            <div className=\"slideshow\">\r\n                {isSlideshowActive ? (\r\n                    <div className=\"full-screen-slideshow\">\r\n                        <DrinkSlide drink={drinks[currentSlide]} />\r\n                        <button onClick={exitSlideshow} className=\"exit-slideshow-button\">\r\n                            ~\r\n                        </button>\r\n                    </div>\r\n                ) : (\r\n                    drinks.map((drink, index) => (\r\n                        <DrinkSlide key={index} drink={drink} />\r\n                    ))\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAO,cAAc;;AAErB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACZQ,SAAS,CAACN,UAAU,CAAC,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,cAAc,GAAGA,CAAA,KAAM;IACzBH,oBAAoB,CAAC,IAAI,CAAC;IAC1BE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpB;IACA,IAAIE,QAAQ,CAACC,eAAe,CAACC,iBAAiB,EAAE;MAC5CF,QAAQ,CAACC,eAAe,CAACC,iBAAiB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;QACtDC,OAAO,CAACC,KAAK,CAAC,gDAAgDF,GAAG,CAACG,OAAO,EAAE,CAAC;MAChF,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpBV,eAAe,CAAEW,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIhB,MAAM,CAACiB,MAAM,CAAC;EACnE,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxBf,oBAAoB,CAAC,KAAK,CAAC;;IAE3B;IACA,IAAII,QAAQ,CAACY,cAAc,EAAE;MACzBZ,QAAQ,CAACY,cAAc,CAAC,CAAC,CAACT,KAAK,CAACC,GAAG,IAAI;QACnCC,OAAO,CAACC,KAAK,CAAC,8CAA8CF,GAAG,CAACG,OAAO,EAAE,CAAC;MAC9E,CAAC,CAAC;IACN;EACJ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACZ,IAAIS,iBAAiB,EAAE;MACnB,MAAMkB,QAAQ,GAAGC,WAAW,CAACN,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;MAC/C,OAAO,MAAMO,aAAa,CAACF,QAAQ,CAAC;IACxC;EACJ,CAAC,EAAE,CAAClB,iBAAiB,EAAEF,MAAM,CAACiB,MAAM,CAAC,CAAC;EAEtC,oBACIpB,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB3B,OAAA;MAAA2B,QAAA,gBACI3B,OAAA;QAAA2B,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB/B,OAAA;QAAQgC,OAAO,EAAEvB,cAAe;QAACiB,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACT/B,OAAA;MAAK0B,SAAS,EAAC,WAAW;MAAAC,QAAA,EACrBtB,iBAAiB,gBACdL,OAAA;QAAK0B,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBAClC3B,OAAA,CAACH,UAAU;UAACoC,KAAK,EAAE9B,MAAM,CAACI,YAAY;QAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3C/B,OAAA;UAAQgC,OAAO,EAAEX,aAAc;UAACK,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAC;QAElE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,GAEN5B,MAAM,CAAC+B,GAAG,CAAC,CAACD,KAAK,EAAEE,KAAK,kBACpBnC,OAAA,CAACH,UAAU;QAAaoC,KAAK,EAAEA;MAAM,GAApBE,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC1C;IACJ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC7B,EAAA,CArEID,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAuET,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}